{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getRoundingMethod } from \"./_lib/roundingMethods.mjs\";\n\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\nexport function roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 30) return constructFrom(date, NaN);\n  const _date = toDate(date);\n  const seconds = _date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n  const minutes = _date.getMinutes() + seconds / 60;\n  const roundingMethod = getRoundingMethod(options?.roundingMethod);\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const remainderMinutes = minutes % nearestTo;\n  const addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  const result = constructFrom(_date, _date);\n  result.setMinutes(roundedMinutes + addedMinutes, 0, 0);\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default roundToNearestMinutes;","map":{"version":3,"names":["constructFrom","toDate","getRoundingMethod","roundToNearestMinutes","date","options","nearestTo","NaN","_date","seconds","getSeconds","minutes","getMinutes","roundingMethod","roundedMinutes","remainderMinutes","addedMinutes","Math","round","result","setMinutes"],"sources":["D:/GuardianNestShopcode/templates/node_modules/date-fns/roundToNearestMinutes.mjs"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getRoundingMethod } from \"./_lib/roundingMethods.mjs\";\n\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\nexport function roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 30) return constructFrom(date, NaN);\n\n  const _date = toDate(date);\n  const seconds = _date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n  const minutes = _date.getMinutes() + seconds / 60;\n  const roundingMethod = getRoundingMethod(options?.roundingMethod);\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const remainderMinutes = minutes % nearestTo;\n  const addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n\n  const result = constructFrom(_date, _date);\n  result.setMinutes(roundedMinutes + addedMinutes, 0, 0);\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default roundToNearestMinutes;\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,iBAAiB,QAAQ,4BAA4B;;AAE9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACnD,MAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAS,IAAI,CAAC;EAEzC,IAAIA,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAG,EAAE,EAAE,OAAON,aAAa,CAACI,IAAI,EAAEG,GAAG,CAAC;EAEpE,MAAMC,KAAK,GAAGP,MAAM,CAACG,IAAI,CAAC;EAC1B,MAAMK,OAAO,GAAGD,KAAK,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMC,OAAO,GAAGH,KAAK,CAACI,UAAU,CAAC,CAAC,GAAGH,OAAO,GAAG,EAAE;EACjD,MAAMI,cAAc,GAAGX,iBAAiB,CAACG,OAAO,EAAEQ,cAAc,CAAC;EACjE,MAAMC,cAAc,GAAGD,cAAc,CAACF,OAAO,GAAGL,SAAS,CAAC,GAAGA,SAAS;EACtE,MAAMS,gBAAgB,GAAGJ,OAAO,GAAGL,SAAS;EAC5C,MAAMU,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,gBAAgB,GAAGT,SAAS,CAAC,GAAGA,SAAS;EAEzE,MAAMa,MAAM,GAAGnB,aAAa,CAACQ,KAAK,EAAEA,KAAK,CAAC;EAC1CW,MAAM,CAACC,UAAU,CAACN,cAAc,GAAGE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;EACtD,OAAOG,MAAM;AACf;;AAEA;AACA,eAAehB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}